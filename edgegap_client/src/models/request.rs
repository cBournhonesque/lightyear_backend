/*
 * Codema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@edgegap.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Request {
    /// The Unique Identifier of the request
    #[serde(rename = "request_id")]
    pub request_id: String,
    /// The URL to connect to the instance
    #[serde(rename = "request_dns")]
    pub request_dns: String,
    /// The Name of the App you requested
    #[serde(rename = "request_app")]
    pub request_app: String,
    /// The name of the App Version you requested
    #[serde(rename = "request_version")]
    pub request_version: String,
    /// How Many Users your request contain
    #[serde(rename = "request_user_count")]
    pub request_user_count: i32,
    /// The city where the deployment is located
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// The country where the deployment is located
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// The continent where the deployment is located
    #[serde(rename = "continent", skip_serializing_if = "Option::is_none")]
    pub continent: Option<String>,
    /// The administrative division where the deployment is located
    #[serde(rename = "administrative_division", skip_serializing_if = "Option::is_none")]
    pub administrative_division: Option<String>,
    /// List of tags associated with the deployment
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "container_log_storage")]
    pub container_log_storage: Box<crate::models::ContainerLogStorageModel>,
}

impl Request {
    pub fn new(request_id: String, request_dns: String, request_app: String, request_version: String, request_user_count: i32, container_log_storage: crate::models::ContainerLogStorageModel) -> Request {
        Request {
            request_id,
            request_dns,
            request_app,
            request_version,
            request_user_count,
            city: None,
            country: None,
            continent: None,
            administrative_division: None,
            tags: None,
            container_log_storage: Box::new(container_log_storage),
        }
    }
}


