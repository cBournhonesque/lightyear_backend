/*
 * Codema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@edgegap.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct Status {
    /// The Unique ID of the Deployment's request
    #[serde(rename = "request_id")]
    pub request_id: String,
    /// The FQDN that allow to connect to your Deployment
    #[serde(rename = "fqdn")]
    pub fqdn: String,
    /// The name of the deployed App
    #[serde(rename = "app_name")]
    pub app_name: String,
    /// The version of the deployed App
    #[serde(rename = "app_version")]
    pub app_version: String,
    /// The current status of the Deployment
    #[serde(rename = "current_status")]
    pub current_status: String,
    /// True if the current Deployment is ready to be connected and running
    #[serde(rename = "running")]
    pub running: bool,
    /// True if the current Deployment is ACL protected
    #[serde(rename = "whitelisting_active")]
    pub whitelisting_active: bool,
    /// Timestamp of the Deployment when it is up and running
    #[serde(rename = "start_time")]
    pub start_time: String,
    /// Timestamp of the end of the Deployment
    #[serde(rename = "removal_time", skip_serializing_if = "Option::is_none")]
    pub removal_time: Option<String>,
    /// Time since the Deployment is up and running in seconds
    #[serde(rename = "elapsed_time")]
    pub elapsed_time: i32,
    /// The last status of the Deployment
    #[serde(rename = "last_status", skip_serializing_if = "Option::is_none")]
    pub last_status: Option<String>,
    /// True if there is an error with the Deployment
    #[serde(rename = "error")]
    pub error: bool,
    /// The error details of the Deployment
    #[serde(rename = "error_detail", skip_serializing_if = "Option::is_none")]
    pub error_detail: Option<String>,
    #[serde(rename = "ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<::std::collections::HashMap<String, crate::models::PortMapping>>,
    /// The public IP
    #[serde(rename = "public_ip")]
    pub public_ip: String,
    /// List of Active Sessions if Deployment App is Session Based
    #[serde(rename = "sessions", skip_serializing_if = "Option::is_none")]
    pub sessions: Option<Vec<crate::models::DeploymentSessionContext>>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<crate::models::DeploymentLocation>>,
    /// List of tags associated with the deployment
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    /// The Capacity of the Deployment
    #[serde(rename = "sockets", skip_serializing_if = "Option::is_none")]
    pub sockets: Option<i32>,
    /// The Capacity Usage of the Deployment
    #[serde(rename = "sockets_usage", skip_serializing_if = "Option::is_none")]
    pub sockets_usage: Option<i32>,
    /// The command to use in the container, null mean it will take the default of the container
    #[serde(rename = "command", skip_serializing_if = "Option::is_none")]
    pub command: Option<String>,
    /// The arguments to use in the container, null mean it will take the default of the container
    #[serde(rename = "arguments", skip_serializing_if = "Option::is_none")]
    pub arguments: Option<String>,
}

impl Status {
    pub fn new(request_id: String, fqdn: String, app_name: String, app_version: String, current_status: String, running: bool, whitelisting_active: bool, start_time: String, elapsed_time: i32, error: bool, public_ip: String) -> Status {
        Status {
            request_id,
            fqdn,
            app_name,
            app_version,
            current_status,
            running,
            whitelisting_active,
            start_time,
            removal_time: None,
            elapsed_time,
            last_status: None,
            error,
            error_detail: None,
            ports: None,
            public_ip,
            sessions: None,
            location: None,
            tags: None,
            sockets: None,
            sockets_usage: None,
            command: None,
            arguments: None,
        }
    }
}


