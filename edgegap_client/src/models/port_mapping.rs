/*
 * Codema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@edgegap.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct PortMapping {
    /// The Port to Connect from Internet
    #[serde(rename = "external", skip_serializing_if = "Option::is_none")]
    pub external: Option<i32>,
    /// The internal Port of the Container
    #[serde(rename = "internal", skip_serializing_if = "Option::is_none")]
    pub internal: Option<i32>,
    /// The Protocol (i.e. 'TCP')
    #[serde(rename = "protocol", skip_serializing_if = "Option::is_none")]
    pub protocol: Option<String>,
    /// The Name of the port if given, default to internal port in string
    #[serde(rename = "name", skip_serializing_if = "Option::is_none")]
    pub name: Option<String>,
    /// If the port require TLS Upgrade
    #[serde(rename = "tls_upgrade", skip_serializing_if = "Option::is_none")]
    pub tls_upgrade: Option<bool>,
    /// link of the port with scheme depending of the protocol
    #[serde(rename = "link", skip_serializing_if = "Option::is_none")]
    pub link: Option<String>,
    /// Internal Proxy Mapping
    #[serde(rename = "proxy", skip_serializing_if = "Option::is_none")]
    pub proxy: Option<i32>,
}

impl PortMapping {
    pub fn new() -> PortMapping {
        PortMapping {
            external: None,
            internal: None,
            protocol: None,
            name: None,
            tls_upgrade: None,
            link: None,
            proxy: None,
        }
    }
}


