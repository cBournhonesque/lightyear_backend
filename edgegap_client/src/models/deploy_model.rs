/*
 * Codema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@edgegap.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct DeployModel {
    /// The name of the App you want to deploy
    #[serde(rename = "app_name")]
    pub app_name: String,
    /// The name of the App Version you want to deploy, if not present, the last version created is picked
    #[serde(rename = "version_name", skip_serializing_if = "Option::is_none")]
    pub version_name: Option<String>,
    /// If the Application is public or private. If not specified, we will look for a private Application
    #[serde(rename = "is_public_app", skip_serializing_if = "Option::is_none")]
    pub is_public_app: Option<bool>,
    /// The List of IP of your user
    #[serde(rename = "ip_list", skip_serializing_if = "Option::is_none")]
    pub ip_list: Option<Vec<String>>,
    /// The list of IP of your user with their location (latitude, longitude)
    #[serde(rename = "geo_ip_list", skip_serializing_if = "Option::is_none")]
    pub geo_ip_list: Option<Vec<crate::models::GeoIpListModel>>,
    #[serde(rename = "telemetry_profile_uuid_list", skip_serializing_if = "Option::is_none")]
    pub telemetry_profile_uuid_list: Option<Vec<String>>,
    /// A list of deployment variables
    #[serde(rename = "env_vars", skip_serializing_if = "Option::is_none")]
    pub env_vars: Option<Vec<crate::models::DeployEnvModel>>,
    /// If you want to skip the Telemetry and use a geolocations decision only
    #[serde(rename = "skip_telemetry", skip_serializing_if = "Option::is_none")]
    pub skip_telemetry: Option<bool>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<crate::models::LocationModel>>,
    /// DEPRECATED - See `filters` instead.
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// DEPRECATED - See `filters` instead.
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// DEPRECATED - See `filters` instead.
    #[serde(rename = "continent", skip_serializing_if = "Option::is_none")]
    pub continent: Option<String>,
    /// DEPRECATED - See `filters` instead.
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// DEPRECATED - See `filters` instead.
    #[serde(rename = "administrative_division", skip_serializing_if = "Option::is_none")]
    pub administrative_division: Option<String>,
    /// A web URL. This url will be called with method POST. The deployment status will be send in JSON format
    #[serde(rename = "webhook_url", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
    /// The list of tags for your deployment
    #[serde(rename = "tags", skip_serializing_if = "Option::is_none")]
    pub tags: Option<Vec<String>>,
    #[serde(rename = "container_log_storage", skip_serializing_if = "Option::is_none")]
    pub container_log_storage: Option<Box<crate::models::ContainerLogStorageModel>>,
    /// Filters to use while choosing the deployment location.
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<crate::models::ApiModelDeploymentfilter>>,
    /// Algorithm used to select the edge location
    #[serde(rename = "ap_sort_strategy", skip_serializing_if = "Option::is_none")]
    pub ap_sort_strategy: Option<ApSortStrategy>,
}

impl DeployModel {
    pub fn new(app_name: String) -> DeployModel {
        DeployModel {
            app_name,
            version_name: None,
            is_public_app: None,
            ip_list: None,
            geo_ip_list: None,
            telemetry_profile_uuid_list: None,
            env_vars: None,
            skip_telemetry: None,
            location: None,
            city: None,
            country: None,
            continent: None,
            region: None,
            administrative_division: None,
            webhook_url: None,
            tags: None,
            container_log_storage: None,
            filters: None,
            ap_sort_strategy: None,
        }
    }
}

/// Algorithm used to select the edge location
#[derive(Clone, Copy, Debug, Eq, PartialEq, Ord, PartialOrd, Hash, Serialize, Deserialize)]
pub enum ApSortStrategy {
    #[serde(rename = "basic")]
    Basic,
    #[serde(rename = "weighted")]
    Weighted,
}

