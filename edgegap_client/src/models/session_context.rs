/*
 * Codema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@edgegap.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SessionContext {
    /// Unique UUID
    #[serde(rename = "session_id")]
    pub session_id: String,
    /// Custom ID if Available
    #[serde(rename = "custom_id")]
    pub custom_id: String,
    /// Current status of the session
    #[serde(rename = "status")]
    pub status: String,
    /// If the session is linked to a Ready deployment
    #[serde(rename = "ready")]
    pub ready: bool,
    /// If the session is linked to a deployment
    #[serde(rename = "linked")]
    pub linked: bool,
    /// Type of session created
    #[serde(rename = "kind")]
    pub kind: String,
    /// Count of user this session currently have
    #[serde(rename = "user_count")]
    pub user_count: i32,
    /// Unique UUID
    #[serde(rename = "deployment_request_id")]
    pub deployment_request_id: String,
    /// When your Session is Linked, Unprocessable or in Error, we will POST the session's details on the webhook_url 
    #[serde(rename = "webhook_url", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
}

impl SessionContext {
    pub fn new(session_id: String, custom_id: String, status: String, ready: bool, linked: bool, kind: String, user_count: i32, deployment_request_id: String) -> SessionContext {
        SessionContext {
            session_id,
            custom_id,
            status,
            ready,
            linked,
            kind,
            user_count,
            deployment_request_id,
            webhook_url: None,
        }
    }
}


