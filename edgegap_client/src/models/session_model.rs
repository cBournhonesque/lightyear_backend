/*
 * Codema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@edgegap.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct SessionModel {
    /// The Name of the App you want to deploy, example:    supermario
    #[serde(rename = "app_name")]
    pub app_name: String,
    /// The Name of the App Version you want to deploy, example:    v1.0
    #[serde(rename = "version_name", skip_serializing_if = "Option::is_none")]
    pub version_name: Option<String>,
    /// The List of IP of your user, Array of String, example:     [\"162.254.103.13\",\"198.12.116.39\", \"162.254.135.39\", \"162.254.129.34\"]
    #[serde(rename = "ip_list", skip_serializing_if = "Option::is_none")]
    pub ip_list: Option<Vec<String>>,
    /// The list of IP of your user with their location (latitude, longitude)
    #[serde(rename = "geo_ip_list", skip_serializing_if = "Option::is_none")]
    pub geo_ip_list: Option<Vec<crate::models::GeoIpListModel>>,
    /// The request id of your deployment. If specified, the session will link to the deployment
    #[serde(rename = "deployment_request_id", skip_serializing_if = "Option::is_none")]
    pub deployment_request_id: Option<String>,
    #[serde(rename = "location", skip_serializing_if = "Option::is_none")]
    pub location: Option<Box<crate::models::LocationModel>>,
    /// If you want your session in a specific city
    #[serde(rename = "city", skip_serializing_if = "Option::is_none")]
    pub city: Option<String>,
    /// If you want your session in a specific country
    #[serde(rename = "country", skip_serializing_if = "Option::is_none")]
    pub country: Option<String>,
    /// If you want your session in a specific continent
    #[serde(rename = "continent", skip_serializing_if = "Option::is_none")]
    pub continent: Option<String>,
    /// If you want your session in a specific administrative division
    #[serde(rename = "administrative_division", skip_serializing_if = "Option::is_none")]
    pub administrative_division: Option<String>,
    /// If you want your session in a specific region
    #[serde(rename = "region", skip_serializing_if = "Option::is_none")]
    pub region: Option<String>,
    /// List of Selectors to filter potential Deployment to link and tag the Session
    #[serde(rename = "selectors", skip_serializing_if = "Option::is_none")]
    pub selectors: Option<Vec<crate::models::SelectorModel>>,
    /// When your Session is Linked, Unprocessable or in Error, we will POST the session's details on the webhook_url 
    #[serde(rename = "webhook_url", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
    /// List of location filters to apply to the session
    #[serde(rename = "filters", skip_serializing_if = "Option::is_none")]
    pub filters: Option<Vec<crate::models::SessionFilterModel>>,
    /// If system should skip the telemetry and use GeoBase decision only
    #[serde(rename = "skip_telemetry", skip_serializing_if = "Option::is_none")]
    pub skip_telemetry: Option<bool>,
}

impl SessionModel {
    pub fn new(app_name: String) -> SessionModel {
        SessionModel {
            app_name,
            version_name: None,
            ip_list: None,
            geo_ip_list: None,
            deployment_request_id: None,
            location: None,
            city: None,
            country: None,
            continent: None,
            administrative_division: None,
            region: None,
            selectors: None,
            webhook_url: None,
            filters: None,
            skip_telemetry: None,
        }
    }
}


