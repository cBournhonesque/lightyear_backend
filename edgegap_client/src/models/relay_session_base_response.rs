/*
 * Codema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@edgegap.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct RelaySessionBaseResponse {
    /// The session ID
    #[serde(rename = "session_id")]
    pub session_id: String,
    /// The authorization token for the session
    #[serde(rename = "authorization_token", skip_serializing_if = "Option::is_none")]
    pub authorization_token: Option<i32>,
    /// The status of the session
    #[serde(rename = "status")]
    pub status: String,
    /// If the session is ready to be used
    #[serde(rename = "ready")]
    pub ready: bool,
    /// If the session is linked to a relay
    #[serde(rename = "linked")]
    pub linked: bool,
    /// The error message if the session failed
    #[serde(rename = "error", skip_serializing_if = "Option::is_none")]
    pub error: Option<String>,
    /// List Session Users
    #[serde(rename = "session_users", skip_serializing_if = "Option::is_none")]
    pub session_users: Option<Vec<crate::models::RelaySessionUserResponse>>,
    /// The relay details the session is linked to
    #[serde(rename = "relay", skip_serializing_if = "Option::is_none")]
    pub relay: Option<Box<crate::models::RelayResponse>>,
    /// The webhook URL that we will call once the session is ready
    #[serde(rename = "webhook_url", skip_serializing_if = "Option::is_none")]
    pub webhook_url: Option<String>,
}

impl RelaySessionBaseResponse {
    pub fn new(session_id: String, status: String, ready: bool, linked: bool) -> RelaySessionBaseResponse {
        RelaySessionBaseResponse {
            session_id,
            authorization_token: None,
            status,
            ready,
            linked,
            error: None,
            session_users: None,
            relay: None,
            webhook_url: None,
        }
    }
}


