/*
 * Codema
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * Contact: info@edgegap.com
 * Generated by: https://openapi-generator.tech
 */




#[derive(Clone, Debug, PartialEq, Serialize, Deserialize)]
pub struct AppVersionPayload {
    /// The Version Name
    #[serde(rename = "name")]
    pub name: String,
    /// If the Version is active currently in the system
    #[serde(rename = "is_active", skip_serializing_if = "Option::is_none")]
    pub is_active: Option<bool>,
    /// The Repository where the image is (i.e. 'harbor.edgegap.com' or 'docker.io')
    #[serde(rename = "docker_repository")]
    pub docker_repository: String,
    /// The name of your image (i.e. 'edgegap/demo')
    #[serde(rename = "docker_image")]
    pub docker_image: String,
    /// The tag of your image (i.e. '0.1.2')
    #[serde(rename = "docker_tag")]
    pub docker_tag: String,
    /// The username to access the docker repository
    #[serde(rename = "private_username", skip_serializing_if = "Option::is_none")]
    pub private_username: Option<String>,
    /// The Private Password or Token of the username (We recommend to use a token)
    #[serde(rename = "private_token", skip_serializing_if = "Option::is_none")]
    pub private_token: Option<String>,
    /// Units of vCPU needed (1024 = 1vcpu)
    #[serde(rename = "req_cpu")]
    pub req_cpu: i32,
    /// Units of memory in MB needed (1024 = 1GB)
    #[serde(rename = "req_memory")]
    pub req_memory: i32,
    /// Units of GPU needed (1024 = 1 GPU)
    #[serde(rename = "req_video", skip_serializing_if = "Option::is_none")]
    pub req_video: Option<i32>,
    /// The Max duration of the game in minute. 0 means forever.
    #[serde(rename = "max_duration", skip_serializing_if = "Option::is_none")]
    pub max_duration: Option<i32>,
    /// Allow to inject ASA Variables
    #[serde(rename = "use_telemetry", skip_serializing_if = "Option::is_none")]
    pub use_telemetry: Option<bool>,
    /// Allow to inject Context Variables
    #[serde(rename = "inject_context_env", skip_serializing_if = "Option::is_none")]
    pub inject_context_env: Option<bool>,
    /// ACL Protection is active
    #[serde(rename = "whitelisting_active", skip_serializing_if = "Option::is_none")]
    pub whitelisting_active: Option<bool>,
    /// Allow faster deployment by caching your container image in every Edge site
    #[serde(rename = "force_cache", skip_serializing_if = "Option::is_none")]
    pub force_cache: Option<bool>,
    /// Start of the preferred interval for caching your container
    #[serde(rename = "cache_min_hour", skip_serializing_if = "Option::is_none")]
    pub cache_min_hour: Option<i32>,
    /// End of the preferred interval for caching your container
    #[serde(rename = "cache_max_hour", skip_serializing_if = "Option::is_none")]
    pub cache_max_hour: Option<i32>,
    /// Estimated maximum time in seconds to deploy, after this time we will consider it not working and retry.
    #[serde(rename = "time_to_deploy", skip_serializing_if = "Option::is_none")]
    pub time_to_deploy: Option<i32>,
    /// Enable every location available. By enabling this, your request will use every potential location, including those which may require a longer time to deploy. This means that your application could take significantly more time before being ready. We do not recommend this feature for live games. This functionality does not support ACL and Caching at the moment.
    #[serde(rename = "enable_all_locations", skip_serializing_if = "Option::is_none")]
    pub enable_all_locations: Option<bool>,
    #[serde(rename = "session_config", skip_serializing_if = "Option::is_none")]
    pub session_config: Option<Box<crate::models::AppVersionCreateSessionConfig>>,
    #[serde(rename = "ports", skip_serializing_if = "Option::is_none")]
    pub ports: Option<Vec<crate::models::AppVersionPort>>,
    #[serde(rename = "probe", skip_serializing_if = "Option::is_none")]
    pub probe: Option<Box<crate::models::AppVersionProbe>>,
    #[serde(rename = "envs", skip_serializing_if = "Option::is_none")]
    pub envs: Option<Vec<crate::models::AppVersionEnv>>,
    /// By enabling the verify_image option, your image infos (docker_repository, docker_image, docker_tag) will be tested.
    #[serde(rename = "verify_image", skip_serializing_if = "Option::is_none")]
    pub verify_image: Option<bool>,
    /// Termination grace period in seconds after the SIGTERM signal has been sent
    #[serde(rename = "termination_grace_period_seconds", skip_serializing_if = "Option::is_none")]
    pub termination_grace_period_seconds: Option<i32>,
    /// The name of the endpoint storage to link
    #[serde(rename = "endpoint_storage", skip_serializing_if = "Option::is_none")]
    pub endpoint_storage: Option<String>,
}

impl AppVersionPayload {
    pub fn new(name: String, docker_repository: String, docker_image: String, docker_tag: String, req_cpu: i32, req_memory: i32) -> AppVersionPayload {
        AppVersionPayload {
            name,
            is_active: None,
            docker_repository,
            docker_image,
            docker_tag,
            private_username: None,
            private_token: None,
            req_cpu,
            req_memory,
            req_video: None,
            max_duration: None,
            use_telemetry: None,
            inject_context_env: None,
            whitelisting_active: None,
            force_cache: None,
            cache_min_hour: None,
            cache_max_hour: None,
            time_to_deploy: None,
            enable_all_locations: None,
            session_config: None,
            ports: None,
            probe: None,
            envs: None,
            verify_image: None,
            termination_grace_period_seconds: None,
            endpoint_storage: None,
        }
    }
}


